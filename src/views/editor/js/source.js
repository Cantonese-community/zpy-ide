class Source {
    example() {
        let e0 = {
            name: '插入排序',
            source: `
函数 插入排序(目标数组):
    对于 索引一 在 范围(0, 长(目标数组) - 1):
        这个 = 目标数组[索引一]
        之后 = 目标数组[索引一 + 1]
        如果 这个 > 之后:
            替换 = 之后
            对于 索引二 在 范围(索引一, -1, -1):
                目标数组[索引二+1] = 目标数组[索引二]
                如果 目标数组[索引二] < 替换:
                    终止
            目标数组[索引二+1] = 替换
            当 索引二 >= 0 与 目标数组[索引二] >= 替换:
                目标数组[索引二+1] = 目标数组[索引二]
                索引二 -= 1
            目标数组[索引二+1] = 替换
    返回 目标数组
    
测试数组 = [99, 16, 74, 4, 21, 45, 17, 56, 93, 86, 23, 40, 61, 31, 30, 79, 56, 6, 87, 52]
打印(插入排序(测试数组))
`
        }
        let e1 = {
            name: '希尔排序',
            source: `
函数 希尔排序(目标数组):
    步长 = 长(目标数组)
    当 步长 > 0:
        步长 //= 2
        对于 索引一 在 范围(步长, 长(目标数组)):
            替换 = 目标数组[索引一]
            索引二 = 索引一
            当 索引二 >= 步长 与 替换 < 目标数组[索引二-步长]:
                目标数组[索引二] = 目标数组[索引二-步长]
                索引二 -= 步长
            目标数组[索引二] = 替换
    返回 目标数组
    
测试数组 = [99, 16, 74, 4, 21, 45, 17, 56, 93, 86, 23, 40, 61, 31, 30, 79, 56, 6, 87, 52]
打印(希尔排序(测试数组))
`
        }
        let e2 = {
            name: '冒泡排序',
            source: `
函数 冒泡排序(目标数组):
    对于 索引一 在 范围(长(目标数组), 0, -1):
        标记 = 错
        对于 索引二 在 范围(0, 索引一 - 1):
            如果 目标数组[索引二] > 目标数组[索引二+1]:
                目标数组[索引二], 目标数组[索引二+1] = 目标数组[索引二+1], 目标数组[索引二]
        如果 标记:
            终止
    返回 目标数组
    
测试数组 = [99, 16, 74, 4, 21, 45, 17, 56, 93, 86, 23, 40, 61, 31, 30, 79, 56, 6, 87, 52]
打印(冒泡排序(测试数组))
`
        }
        let e3 = {
            name: '快速排序',
            source: `
函数 快速排序(目标数组):
    函数 _快速排序(目标数组, 左指针, 右指针):
        枢轴 = 目标数组[左指针]
        原左指针 = 左指针
        原右指针 = 右指针
        左指针空标记 = 0  # 左指针为空
        当 左指针 != 右指针:
            如果 左指针空标记:
                如果 (目标数组[左指针] >= 枢轴):
                    目标数组[右指针] = 目标数组[左指针]
                    左指针空标记 = 0
                否则:
                    左指针 += 1
            否则:
                如果 (目标数组[右指针] < 枢轴):
                    目标数组[左指针] = 目标数组[右指针]
                    左指针空标记 = 1
                否则:
                    右指针 -= 1
        中指针 = 左指针
        目标数组[中指针] = 枢轴
        如果 原左指针 < 中指针 - 1:
            _快速排序(目标数组, 原左指针, 中指针 - 1)
        如果 中指针+1 < 原右指针:
            _快速排序(目标数组, 中指针+1, 原右指针)
    左指针 = 0
    右指针 = 长(目标数组) - 1
    _快速排序(目标数组, 左指针, 右指针)
    返回 目标数组
    
测试数组 = [99, 16, 74, 4, 21, 45, 17, 56, 93, 86, 23, 40, 61, 31, 30, 79, 56, 6, 87, 52]
打印(快速排序(测试数组))
`
        }
        let e4 = {
            name: '选择排序',
            source: `
函数 选择排序(目标数组):
    对于 索引一 在 范围(长(目标数组)):
        最小数值 = 索引一
        对于 索引二 在 范围(索引一, 长(目标数组)):
            如果 目标数组[索引二] < 目标数组[最小数值]:
                最小数值 = 索引二
        目标数组[索引一], 目标数组[最小数值] = 目标数组[最小数值], 目标数组[索引一]
    返回 目标数组
    
测试数组 = [99, 16, 74, 4, 21, 45, 17, 56, 93, 86, 23, 40, 61, 31, 30, 79, 56, 6, 87, 52]
打印(选择排序(测试数组))
`
        }
        
        return {
            'name': '例子',
            'id': 'example',
            'codes': [e0, e1, e2, e3, e4]
        }
    }
}

let source = new Source()

export {source}

